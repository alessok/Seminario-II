import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from sklearn.decomposition import PCA # Para el gr치fico PCA

# --- 1. Configuraci칩n de la P치gina ---
st.set_page_config(page_title="Dashboard PYMEs", layout="wide", initial_sidebar_state="expanded")
st.title("游늵 Comprensi칩n Din치mica del Cliente en PYMEs")
st.markdown("An치lisis de Segmentaci칩n (K-Medoids) y Pron칩sticos de Ingresos (Prophet)")

# --- 2. Carga de Datos ---
@st.cache_data
def load_data():
    try:
        df_clusters_info = pd.read_csv('pymes_con_clusters.csv') 
        df_historico = pd.read_csv('ts_mensual_historico.csv', index_col='fecha', parse_dates=True)
        df_historico.columns = [str(int(float(col))) for col in df_historico.columns]

        pronosticos = {}
        for i in range(3):
            try:
                pronosticos[str(i)] = pd.read_csv(f'pronostico_prophet_cluster_{i}.csv', index_col='ds', parse_dates=True)
            except FileNotFoundError:
                 pronosticos[str(i)] = None

        df_summary = pd.read_csv('kmedoids_summary.csv', index_col='cluster_kmedoids')
        df_summary.index = df_summary.index.astype(str)
        
        df_mapeo = pd.read_csv('mapeo_pymes.csv')
        
        df_X_procesado = pd.read_csv('X_procesado_para_pca.csv')

        return df_clusters_info, df_historico, pronosticos, df_summary, df_mapeo, df_X_procesado
    except Exception as e:
        st.error(f"Error al cargar los datos. Error: {e}")
        return None, None, None, None, None, None

df_clusters_info, df_historico, pronosticos, df_summary, df_mapeo, df_X_procesado = load_data()

# --- Nombres, Descripciones COMPLETAS y Recomendaciones COMPLETAS ---
cluster_names = {"0": "L칤deres Transaccionales", "1": "Premium de Alto Valor", "2": "Emergentes Moderados"}
cluster_colors = {"0": "blue", "1": "green", "2": "orange"}

cluster_descriptions = {
    "0": "Este cl칰ster lidera con los mayores ingresos totales (38,119.24) y el mayor n칰mero de transacciones (33.02), adem치s de la mayor diversidad de productos 칰nicos (16.58). Su periodo de actividad m치s largo (804.16 d칤as) sugiere una base de clientes leales y altamente activos. Representa a las PYMEs m치s consolidadas y exitosas.",
    "1": "Este cl칰ster se destaca por tener el ticket promedio m치s alto (1,473.63), lo que indica compras de gran valor con una frecuencia moderada de transacciones (22.23). Sus ingresos totales significativos (32,567.36) y periodo de actividad considerable (759.18 d칤as) reflejan una base de clientes estable y con alto poder adquisitivo.",
    "2": "Este cl칰ster tiene los menores ingresos totales (16,171.36), n칰mero de transacciones (19.45) y productos 칰nicos (12.07), junto con el ticket promedio m치s bajo (849.87) y el periodo de actividad m치s corto (725.95 d칤as). Representa a PYMEs emergentes o de menor escala con una actividad menos intensa pero con potencial de crecimiento."
}

cluster_recommendations = {
    "0": """
    **Recomendaci칩n Principal:** Maximizar la ventaja competitiva aprovechando su liderazgo en transacciones y diversidad de productos.
    **Acciones Concretas:**
    * Programas de fidelizaci칩n avanzados: Implementar un sistema de niveles VIP con beneficios escalonados (descuentos exclusivos, acceso temprano a productos, servicios personalizados) para mantener su alta frecuencia transaccional.
    * Cross-selling inteligente: Usar an치lisis de datos para identificar productos complementarios y enviar recomendaciones personalizadas a clientes bas치ndose en su historial de compras diverso.
    * Expansi칩n estrat칠gica: Considerar abrir nuevos canales de venta (marketplace digital, franquicias) aprovechando su base s칩lida y experiencia operacional para capturar m치s mercado.
    """,
    "1": """
    **Recomendaci칩n Principal:** Capitalizar el alto valor de ticket promedio y optimizar la experiencia premium del cliente.
    **Acciones Concretas:**
    * Servicios premium: Ofrecer experiencias exclusivas como asesoramiento personalizado, env칤o gratuito express, o servicio postventa diferenciado para justificar y mantener precios altos.
    * Upselling estrat칠gico: Entrenar al equipo de ventas para identificar oportunidades de venta de productos de mayor valor o paquetes premium durante cada interacci칩n.
    * Marketing de valor: Crear contenido que destaque la calidad superior y beneficios 칰nicos de sus productos/servicios para atraer m치s clientes dispuestos a pagar precios premium.
    """,
    "2": """
    **Recomendaci칩n Principal:** Acelerar el crecimiento mediante estrategias de escalamiento y mejora de la propuesta de valor.
    **Acciones Concretas:**
    * Mejora del ticket promedio: Implementar t칠cnicas de bundling (venta de paquetes) y promociones que incentiven compras de mayor valor, como "lleva 2 paga 1.5" o descuentos por volumen.
    * Incremento de frecuencia: Lanzar campa침as de reactivaci칩n autom치ticas via email/WhatsApp recordando productos vistos o comprando, con ofertas de tiempo limitado para generar urgencia.
    * Diversificaci칩n de productos: Analizar qu칠 productos/servicios demandan los clusters superiores e incorporar gradualmente opciones similares para ampliar el cat치logo y aumentar las oportunidades de venta.
    """
}

# --- 3. Verificar Carga y Crear Dashboard ---
if df_clusters_info is not None and df_historico is not None and pronosticos is not None and \
   df_summary is not None and df_mapeo is not None and df_X_procesado is not None:

    st.sidebar.header("Informaci칩n del Proyecto")
    st.sidebar.markdown("---")
    st.sidebar.markdown("Desarrollado como parte de la investigaci칩n:")
    st.sidebar.markdown("*Comprensi칩n Din치mica del Cliente en PYMEs*")
    st.sidebar.markdown("**Autores:** Angelo Montes & Alessandro Ledesma")
    
    tab1, tab2, tab3 = st.tabs(["游늳 Resumen General y Total", "游댌 Exploraci칩n por Cl칰ster", "游늵 Comparaci칩n y PCA"])

    with tab1:
        st.header("Ingresos Totales y Pron칩stico")
        st.markdown("Esta vista muestra la suma de los ingresos hist칩ricos y el pron칩stico consolidado de los 3 cl칰steres.")
        if 'Total' not in df_historico.columns: df_historico['Total'] = df_historico[["0", "1", "2"]].sum(axis=1)
        
        df_pronostico_total_calc = None
        for cl_id, forecast_df in pronosticos.items():
            if forecast_df is not None:
                temp_df = forecast_df[['yhat']].rename(columns={'yhat': cl_id})
                if df_pronostico_total_calc is None: df_pronostico_total_calc = temp_df
                else: df_pronostico_total_calc = df_pronostico_total_calc.join(temp_df, how='outer')
        
        df_pronostico_total_futuro = None
        if df_pronostico_total_calc is not None:
            df_pronostico_total_calc = df_pronostico_total_calc.fillna(0)
            if 'Total' not in df_pronostico_total_calc.columns: df_pronostico_total_calc['Total'] = df_pronostico_total_calc.sum(axis=1)
            
            ultima_fecha_hist = df_historico.index[-1]
            df_pronostico_total_futuro = df_pronostico_total_calc[df_pronostico_total_calc.index > ultima_fecha_hist]

        fig_total = go.Figure()
        fig_total.add_trace(go.Scatter(x=df_historico.index, y=df_historico['Total'], mode='lines', name='Hist칩rico Total', line=dict(color='green', width=2))) 
        if df_pronostico_total_futuro is not None and not df_pronostico_total_futuro.empty:
            fig_total.add_trace(go.Scatter(x=df_pronostico_total_futuro.index, y=df_pronostico_total_futuro['Total'], mode='lines', name='Pron칩stico Total', line=dict(color='purple', dash='dash', width=2)))
        fig_total.update_layout(title='Ingresos Totales (Hist칩rico + Pron칩stico)', xaxis_title='Fecha', yaxis_title='Ingresos Mensuales Totales')
        st.plotly_chart(fig_total, use_container_width=True)
        
        st.subheader("Estad칤sticas Generales")
        st.metric("Total PYMEs Analizadas", df_clusters_info['numerodoi'].nunique())
        st.metric("N칰mero de Cl칰steres", df_summary.shape[0])

    with tab2:
        st.header("Exploraci칩n Detallada por Cl칰ster")
        cluster_seleccionado = st.selectbox(
            "Selecciona un cl칰ster:", options=list(cluster_names.keys()),
            format_func=lambda x: f"Cl칰ster {x}: {cluster_names[x]}", key='select_tab2_v6_completo'
        )

        st.subheader(f"Perfil del Cl칰ster {cluster_seleccionado}: {cluster_names[cluster_seleccionado]}")
        
        # Columna Izquierda para Caracter칤sticas, Descripci칩n y Recomendaciones
        st.markdown("#### Caracter칤sticas Promedio")
        st.dataframe(df_summary.loc[cluster_seleccionado].round(2))
        st.metric(f"PYMEs en Cl칰ster {cluster_seleccionado}", df_clusters_info[df_clusters_info['cluster_kmedoids'] == int(cluster_seleccionado)].shape[0])
        
        st.markdown("#### Descripci칩n del Cl칰ster")
        st.write(cluster_descriptions.get(cluster_seleccionado, "Descripci칩n no disponible."))
        
        st.markdown("#### Recomendaciones Estrat칠gicas")
        st.info(cluster_recommendations.get(cluster_seleccionado, "Recomendaciones no disponibles."))

        # Columna (o secci칩n) para Gr치fico de Pron칩stico y Tabla Drill-Down debajo
        st.markdown("---") 
        st.markdown("#### Ingresos Hist칩ricos y Pron칩stico 2026")
        fig_cluster = go.Figure()
        fig_cluster.add_trace(go.Scatter(x=df_historico.index, y=df_historico[cluster_seleccionado], mode='lines', name='Hist칩rico Real', line=dict(color='green', width=2)))
        pronostico_actual = pronosticos.get(cluster_seleccionado)
        if pronostico_actual is not None:
             fig_cluster.add_trace(go.Scatter(x=pronostico_actual.index, y=pronostico_actual['yhat'], mode='lines', name='Pron칩stico Prophet', line=dict(color='red', dash='dash', width=2))) 
        fig_cluster.update_layout(title=f'Ingresos - Cl칰ster {cluster_seleccionado}', xaxis_title='Fecha', yaxis_title='Ingresos Mensuales', showlegend=True)
        st.plotly_chart(fig_cluster, use_container_width=True)

        with st.expander(f"Ver lista de PYMEs (numerodoi y Raz칩n Social) en Cl칰ster {cluster_seleccionado}"):
            pymes_en_cluster = df_clusters_info[df_clusters_info['cluster_kmedoids'] == int(cluster_seleccionado)]
            pymes_con_nombres = pd.merge(pymes_en_cluster, df_mapeo, on='numerodoi', how='left')
            st.dataframe(pymes_con_nombres[['numerodoi', 'razonsocial', 'ingresos_totales']].round(0).set_index('numerodoi'))


    with tab3:
        st.header("Comparaci칩n Visual de Cl칰steres y An치lisis PCA")
        st.markdown("Utiliza estos gr치ficos para comparar caracter칤sticas y ver la separaci칩n de cl칰steres.")
        
        col_comp1, col_comp2 = st.columns(2)

        with col_comp1:
            st.subheader("Comparaci칩n de Medias")
            char_bar = st.selectbox("Caracter칤stica (Barras):", options=df_summary.columns.tolist(), key='bar_select_tab3_v6_completo')
            fig_bar_comp = px.bar(df_summary, x=df_summary.index, y=char_bar, 
                                 title=f'{char_bar} Promedio', color=df_summary.index, 
                                 color_discrete_map=cluster_colors, labels={'index': 'Cl칰ster'})
            st.plotly_chart(fig_bar_comp, use_container_width=True)
        
        with col_comp2:
            st.subheader("Distribuci칩n de Caracter칤sticas")
            char_box = st.selectbox("Caracter칤stica (Cajas):", options=df_summary.columns.tolist(), key='box_select_tab3_v6_completo')
            fig_box_comp = px.box(df_clusters_info, x=df_clusters_info['cluster_kmedoids'].astype(str), y=char_box, 
                                 title=f'Distribuci칩n de {char_box}', color=df_clusters_info['cluster_kmedoids'].astype(str), 
                                 color_discrete_map=cluster_colors, labels={'cluster_kmedoids': 'Cl칰ster'})
            st.plotly_chart(fig_box_comp, use_container_width=True)

        st.markdown("---")
        st.subheader("Visualizaci칩n de Cl칰steres con PCA (2 Componentes)")
        if df_X_procesado is not None and df_clusters_info.shape[0] == df_X_procesado.shape[0]:
            pca = PCA(n_components=2, random_state=42)
            principal_components = pca.fit_transform(df_X_procesado)
            df_pca = pd.DataFrame(data=principal_components, columns=['PCA Componente 1', 'PCA Componente 2'])
            
            df_pca['Cl칰ster Etiqueta'] = df_clusters_info['cluster_kmedoids'].astype(str).values 
            df_pca['Cl칰ster Nombre'] = df_pca['Cl칰ster Etiqueta'].map(lambda x: f"Cl칰ster {x}: {cluster_names.get(x, '')}")

            fig_pca = px.scatter(df_pca, x='PCA Componente 1', y='PCA Componente 2', color='Cl칰ster Nombre',
                                 title='Separaci칩n de PYMEs por Cl칰ster (PCA)',
                                 color_discrete_map={f"Cl칰ster {k}: {v}": cluster_colors[k] for k, v in cluster_names.items()},
                                 hover_data={'Cl칰ster Nombre': True, 'Cl칰ster Etiqueta': True}
                                )
            st.plotly_chart(fig_pca, use_container_width=True)
            
            explained_variance = pca.explained_variance_ratio_
            st.caption(f"Varianza explicada por PCA1: {explained_variance[0]:.2%}")
            st.caption(f"Varianza explicada por PCA2: {explained_variance[1]:.2%}")
            st.caption(f"Varianza total explicada por los 2 componentes: {sum(explained_variance):.2%}")
        else:
            st.warning("No se puede generar el gr치fico PCA: datos de X_procesado no disponibles o no coinciden en tama침o.")

else:
    st.error("No se pudieron cargar todos los datos necesarios. Por favor, verifica que los archivos CSV est칠n en la misma carpeta y se hayan generado correctamente.")