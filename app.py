import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from sklearn.decomposition import PCA # Para el gr√°fico PCA

# --- 1. Configuraci√≥n de la P√°gina ---
st.set_page_config(page_title="Dashboard PYMEs - An√°lisis Clustering", layout="wide", initial_sidebar_state="expanded")
st.title("üéì Segmentaci√≥n y Predicci√≥n de Comportamiento de Clientes en PYMEs")
st.markdown("**Proyecto de Investigaci√≥n en An√°lisis de Datos Empresariales**")
st.markdown("*Sistema integrado de Clustering y Series Temporales para optimizaci√≥n de PYMEs*")
st.markdown("**Desarrolladores:** [Nombres ocultos por privacidad]")
st.markdown("---")
st.markdown("### üìä Dashboard Interactivo: Clustering K-Medoids + Pron√≥sticos Prophet")
st.markdown("**Metodolog√≠a:** 8 fases | **Dataset:** 3,944 registros de 155 empresas | **An√°lisis:** 2023-2025")

# --- 2. Carga de Datos ---
@st.cache_data
def load_data():
    try:
        df_clusters_info = pd.read_csv('pymes_con_clusters.csv') 
        df_historico = pd.read_csv('ts_mensual_historico.csv', index_col='fecha', parse_dates=True)
        df_historico.columns = [str(int(float(col))) for col in df_historico.columns]

        pronosticos = {}
        for i in range(3):
            try:
                pronosticos[str(i)] = pd.read_csv(f'pronostico_prophet_cluster_{i}.csv', index_col='ds', parse_dates=True)
            except FileNotFoundError:
                 pronosticos[str(i)] = None

        df_summary = pd.read_csv('kmedoids_summary.csv', index_col='cluster_kmedoids')
        df_summary.index = df_summary.index.astype(str)
        
        df_mapeo = pd.read_csv('mapeo_pymes.csv')
        
        df_X_procesado = pd.read_csv('X_procesado_para_pca.csv')

        return df_clusters_info, df_historico, pronosticos, df_summary, df_mapeo, df_X_procesado
    except Exception as e:
        st.error(f"Error al cargar los datos. Error: {e}")
        return None, None, None, None, None, None

df_clusters_info, df_historico, pronosticos, df_summary, df_mapeo, df_X_procesado = load_data()

# --- Nombres, Descripciones COMPLETAS y Recomendaciones COMPLETAS ---
cluster_names = {"0": "L√≠deres Transaccionales", "1": "Premium de Alto Valor", "2": "Emergentes Moderados"}
cluster_colors = {"0": "blue", "1": "green", "2": "orange"}

cluster_descriptions = {
    "0": "Este cl√∫ster lidera con los mayores ingresos totales (38,119.24) y el mayor n√∫mero de transacciones (33.02), adem√°s de la mayor diversidad de productos √∫nicos (16.58). Su periodo de actividad m√°s largo (804.16 d√≠as) sugiere una base de clientes leales y altamente activos. Representa a las PYMEs m√°s consolidadas y exitosas.",
    "1": "Este cl√∫ster se destaca por tener el ticket promedio m√°s alto (1,473.63), lo que indica compras de gran valor con una frecuencia moderada de transacciones (22.23). Sus ingresos totales significativos (32,567.36) y periodo de actividad considerable (759.18 d√≠as) reflejan una base de clientes estable y con alto poder adquisitivo.",
    "2": "Este cl√∫ster tiene los menores ingresos totales (16,171.36), n√∫mero de transacciones (19.45) y productos √∫nicos (12.07), junto con el ticket promedio m√°s bajo (849.87) y el periodo de actividad m√°s corto (725.95 d√≠as). Representa a PYMEs emergentes o de menor escala con una actividad menos intensa pero con potencial de crecimiento."
}

cluster_recommendations = {
    "0": """
    **Recomendaci√≥n Principal (Basada en Marco Te√≥rico):** Maximizar ventaja competitiva mediante modelo RFM extendido y clustering din√°mico.
    
    **Fundamento Acad√©mico:** Seg√∫n S. Wang et al. (2024), el modelo LRFMS supera al RFM tradicional en 18-21% para clusters de alta transaccionalidad.
    
    **Acciones Estrat√©gicas Espec√≠ficas:**
    
    üéØ **Programas de Fidelizaci√≥n Multinivel (Evidencia: Ebadi Jalal & Elmaghraby, 2024)**
    ‚Ä¢ Implementar sistema VIP con 3 niveles basado en frecuencia transaccional (33+ transacciones)
    ‚Ä¢ Beneficios escalonados: descuentos 5%-10%-15%, acceso temprano, servicios personalizados
    ‚Ä¢ ROI esperado: 15% aumento en ventas seg√∫n modelo RFM mejorado (Kasem et al., 2024)
    
    üîÑ **Cross-selling Predictivo (Base: Prophet + Clustering)**
    ‚Ä¢ Usar pron√≥sticos Prophet para identificar ventanas √≥ptimas de recomendaci√≥n
    ‚Ä¢ An√°lisis de canasta de mercado en 16.58 productos √∫nicos promedio
    ‚Ä¢ Automatizaci√≥n via email/WhatsApp en picos estacionales predichos
    
    üìà **Expansi√≥n Estrat√©gica Basada en Datos**
    ‚Ä¢ Replicar modelo exitoso (804 d√≠as actividad promedio) en nuevos canales
    ‚Ä¢ Marketplace digital con algoritmos de recomendaci√≥n similares
    ‚Ä¢ Franquicias usando metodolog√≠a de clustering validada (Silhouette: 0.2337)
    """,
    "1": """
    **Recomendaci√≥n Principal (Basada en Marco Te√≥rico):** Optimizar experiencia premium mediante marketing de valor diferenciado.
    
    **Fundamento Acad√©mico:** Anitha & Neelakandan (2024) demuestran que la personalizaci√≥n premium aumenta retenci√≥n en 20% y reduce inventario en sectores de alto valor.
    
    **Acciones Estrat√©gicas Espec√≠ficas:**
    
    üíé **Servicios Premium Cient√≠ficamente Validados**
    ‚Ä¢ Justificaci√≥n de ticket promedio ($1,473.63) mediante valor agregado cuantificable
    ‚Ä¢ Asesoramiento personalizado basado en an√°lisis predictivo Prophet
    ‚Ä¢ Servicio postventa diferenciado para mantener per√≠odo actividad (759 d√≠as promedio)
    ‚Ä¢ SLA premium: respuesta <2hrs, env√≠o express, garant√≠a extendida
    
    üìä **Upselling Estrat√©gico con Inteligencia Temporal**
    ‚Ä¢ Identificar ventanas √≥ptimas usando pron√≥sticos MAPE 1.72% (mejor precisi√≥n)
    ‚Ä¢ Entrenar equipo con datos de 22.23 transacciones promedio por cliente
    ‚Ä¢ Productos complementarios de alto margen durante picos predichos
    ‚Ä¢ Seguimiento KPI: incremento ticket promedio 10-15%
    
    üéØ **Marketing de Valor Basado en Evidencia**
    ‚Ä¢ Contenido que destaque ROI cuantificable del ticket premium
    ‚Ä¢ Casos de √©xito basados en datos reales del cluster
    ‚Ä¢ Testimonios de clientes con mayor per√≠odo de actividad
    ‚Ä¢ Campa√±as dirigidas a prospectos similares (ingresos $30K-35K)
    """,
    "2": """
    **Recomendaci√≥n Principal (Basada en Marco Te√≥rico):** Acelerar crecimiento mediante estrategias de escalamiento validadas cient√≠ficamente.
    
    **Fundamento Acad√©mico:** Ba√±ales et al. (2025) demuestran que PYMEs emergentes pueden reducir distancia intra-cluster en 52% mediante clustering multifase.
    
    **Acciones Estrat√©gicas Espec√≠ficas:**
    
    üìà **Optimizaci√≥n de Ticket Promedio (Target: $849.87 ‚Üí $1,200)**
    ‚Ä¢ Bundling inteligente basado en an√°lisis de productos √∫nicos (12.07 promedio)
    ‚Ä¢ Promociones "compra X, lleva Y" validadas estad√≠sticamente
    ‚Ä¢ Descuentos por volumen escalados seg√∫n capacidad financiera del cluster
    ‚Ä¢ M√©tricas: MAPE 52.86% indica alta variabilidad = oportunidad de mejora
    
    üîÑ **Incremento de Frecuencia Transaccional (Target: 19.45 ‚Üí 25)**
    ‚Ä¢ Campa√±as de reactivaci√≥n cada 30 d√≠as (per√≠odo actividad: 725 d√≠as)
    ‚Ä¢ WhatsApp automatizado con ofertas time-sensitive
    ‚Ä¢ Recordatorios predictivos basados en patrones Prophet identificados
    ‚Ä¢ Email marketing segmentado por comportamiento de compra hist√≥rico
    
    üöÄ **Diversificaci√≥n Estrat√©gica Progresiva**
    ‚Ä¢ Incorporar gradualmente productos exitosos de clusters superiores
    ‚Ä¢ An√°lisis ABC de productos para maximizar rotaci√≥n limitada
    ‚Ä¢ Alianzas estrat√©gicas para ampliar cat√°logo sin inversi√≥n inicial
    ‚Ä¢ Plan escalonado: +2 productos √∫nicos cada trimestre
    
    üí° **Mentor√≠a Acad√©mica y T√©cnica**
    ‚Ä¢ Implementar metodolog√≠a de 8 fases validada en esta investigaci√≥n
    ‚Ä¢ Capacitaci√≥n en an√°lisis b√°sico con herramientas gratuitas (Google Analytics)
    ‚Ä¢ Seguimiento mensual con m√©tricas simplificadas del dashboard
    ‚Ä¢ Red de apoyo entre PYMEs del mismo cluster para mejores pr√°cticas
    """
}

# --- 3. Verificar Carga y Crear Dashboard ---
if df_clusters_info is not None and df_historico is not None and pronosticos is not None and \
   df_summary is not None and df_mapeo is not None and df_X_procesado is not None:

    st.sidebar.header("üéì Informaci√≥n de la Investigaci√≥n")
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Universidad de Lima**")
    st.sidebar.markdown("Facultad de Ingenier√≠a")
    st.sidebar.markdown("Carrera de Ingenier√≠a de Sistemas")
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Trabajo de Investigaci√≥n:**")
    st.sidebar.markdown("*Segmentaci√≥n y Predicci√≥n de Comportamiento de Clientes en PYMEs mediante Clustering y Series Temporales*")
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Autores:**")
    st.sidebar.markdown("‚Ä¢ [Nombre oculto por privacidad] (c√≥digo oculto)")
    st.sidebar.markdown("‚Ä¢ [Nombre oculto por privacidad] (c√≥digo oculto)")
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Asesora:** Lourdes Ram√≠rez Cerna")
    st.sidebar.markdown("**Fecha:** Mayo 2025")
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Metodolog√≠a:** 8 Fases")
    st.sidebar.markdown("**Dataset:** 3,944 registros")
    st.sidebar.markdown("**Per√≠odo:** Enero 2023 - Mayo 2025")
    st.sidebar.markdown("**Algoritmo:** K-Medoids (k=3)")
    st.sidebar.markdown("**Pron√≥sticos:** Prophet hasta 2026")
    
    tab1, tab2, tab3 = st.tabs(["üìà Resumen General y Total", "üîç Exploraci√≥n por Cl√∫ster", "üìä Comparaci√≥n y PCA"])

    with tab1:
        st.header("Ingresos Totales y Pron√≥stico")
        st.markdown("Esta vista muestra la suma de los ingresos hist√≥ricos y el pron√≥stico consolidado de los 3 cl√∫steres.")
        if 'Total' not in df_historico.columns: df_historico['Total'] = df_historico[["0", "1", "2"]].sum(axis=1)
        
        df_pronostico_total_calc = None
        for cl_id, forecast_df in pronosticos.items():
            if forecast_df is not None:
                temp_df = forecast_df[['yhat']].rename(columns={'yhat': cl_id})
                if df_pronostico_total_calc is None: df_pronostico_total_calc = temp_df
                else: df_pronostico_total_calc = df_pronostico_total_calc.join(temp_df, how='outer')
        
        df_pronostico_total_futuro = None
        if df_pronostico_total_calc is not None:
            df_pronostico_total_calc = df_pronostico_total_calc.fillna(0)
            if 'Total' not in df_pronostico_total_calc.columns: df_pronostico_total_calc['Total'] = df_pronostico_total_calc.sum(axis=1)
            
            ultima_fecha_hist = df_historico.index[-1]
            df_pronostico_total_futuro = df_pronostico_total_calc[df_pronostico_total_calc.index > ultima_fecha_hist]

        fig_total = go.Figure()
        fig_total.add_trace(go.Scatter(x=df_historico.index, y=df_historico['Total'], mode='lines', name='Hist√≥rico Total', line=dict(color='green', width=2))) 
        if df_pronostico_total_futuro is not None and not df_pronostico_total_futuro.empty:
            fig_total.add_trace(go.Scatter(x=df_pronostico_total_futuro.index, y=df_pronostico_total_futuro['Total'], mode='lines', name='Pron√≥stico Total', line=dict(color='purple', dash='dash', width=2)))
        fig_total.update_layout(title='Ingresos Totales (Hist√≥rico + Pron√≥stico)', xaxis_title='Fecha', yaxis_title='Ingresos Mensuales Totales')
        st.plotly_chart(fig_total, use_container_width=True)
        
        st.subheader("Estad√≠sticas Generales")
        st.metric("Total PYMEs Analizadas", df_clusters_info['numerodoi'].nunique())
        st.metric("N√∫mero de Cl√∫steres", df_summary.shape[0])

    with tab2:
        st.header("Exploraci√≥n Detallada por Cl√∫ster")
        cluster_seleccionado = st.selectbox(
            "Selecciona un cl√∫ster:", options=list(cluster_names.keys()),
            format_func=lambda x: f"Cl√∫ster {x}: {cluster_names[x]}", key='select_tab2_v6_completo'
        )

        st.subheader(f"Perfil del Cl√∫ster {cluster_seleccionado}: {cluster_names[cluster_seleccionado]}")
        
        # Columna Izquierda para Caracter√≠sticas, Descripci√≥n y Recomendaciones
        st.markdown("#### Caracter√≠sticas Promedio")
        st.dataframe(df_summary.loc[cluster_seleccionado].round(2))
        st.metric(f"PYMEs en Cl√∫ster {cluster_seleccionado}", df_clusters_info[df_clusters_info['cluster_kmedoids'] == int(cluster_seleccionado)].shape[0])
        
        st.markdown("#### Descripci√≥n del Cl√∫ster")
        st.write(cluster_descriptions.get(cluster_seleccionado, "Descripci√≥n no disponible."))
        
        st.markdown("#### Recomendaciones Estrat√©gicas")
        st.info(cluster_recommendations.get(cluster_seleccionado, "Recomendaciones no disponibles."))

        # Columna (o secci√≥n) para Gr√°fico de Pron√≥stico y Tabla Drill-Down debajo
        st.markdown("---") 
        st.markdown("#### Ingresos Hist√≥ricos y Pron√≥stico 2026")
        fig_cluster = go.Figure()
        fig_cluster.add_trace(go.Scatter(x=df_historico.index, y=df_historico[cluster_seleccionado], mode='lines', name='Hist√≥rico Real', line=dict(color='green', width=2)))
        pronostico_actual = pronosticos.get(cluster_seleccionado)
        if pronostico_actual is not None:
             fig_cluster.add_trace(go.Scatter(x=pronostico_actual.index, y=pronostico_actual['yhat'], mode='lines', name='Pron√≥stico Prophet', line=dict(color='red', dash='dash', width=2))) 
        fig_cluster.update_layout(title=f'Ingresos - Cl√∫ster {cluster_seleccionado}', xaxis_title='Fecha', yaxis_title='Ingresos Mensuales', showlegend=True)
        st.plotly_chart(fig_cluster, use_container_width=True)

        with st.expander(f"Ver lista de PYMEs (numerodoi y Raz√≥n Social) en Cl√∫ster {cluster_seleccionado}"):
            pymes_en_cluster = df_clusters_info[df_clusters_info['cluster_kmedoids'] == int(cluster_seleccionado)]
            pymes_con_nombres = pd.merge(pymes_en_cluster, df_mapeo, on='numerodoi', how='left')
            st.dataframe(pymes_con_nombres[['numerodoi', 'razonsocial', 'ingresos_totales']].round(0).set_index('numerodoi'))


    with tab3:
        st.header("Comparaci√≥n Visual de Cl√∫steres y An√°lisis PCA")
        st.markdown("Utiliza estos gr√°ficos para comparar caracter√≠sticas y ver la separaci√≥n de cl√∫steres.")
        
        col_comp1, col_comp2 = st.columns(2)

        with col_comp1:
            st.subheader("Comparaci√≥n de Medias")
            char_bar = st.selectbox("Caracter√≠stica (Barras):", options=df_summary.columns.tolist(), key='bar_select_tab3_v6_completo')
            fig_bar_comp = px.bar(df_summary, x=df_summary.index, y=char_bar, 
                                 title=f'{char_bar} Promedio', color=df_summary.index, 
                                 color_discrete_map=cluster_colors, labels={'index': 'Cl√∫ster'})
            st.plotly_chart(fig_bar_comp, use_container_width=True)
        
        with col_comp2:
            st.subheader("Distribuci√≥n de Caracter√≠sticas")
            char_box = st.selectbox("Caracter√≠stica (Cajas):", options=df_summary.columns.tolist(), key='box_select_tab3_v6_completo')
            fig_box_comp = px.box(df_clusters_info, x=df_clusters_info['cluster_kmedoids'].astype(str), y=char_box, 
                                 title=f'Distribuci√≥n de {char_box}', color=df_clusters_info['cluster_kmedoids'].astype(str), 
                                 color_discrete_map=cluster_colors, labels={'cluster_kmedoids': 'Cl√∫ster'})
            st.plotly_chart(fig_box_comp, use_container_width=True)

        st.markdown("---")
        st.subheader("Visualizaci√≥n de Cl√∫steres con PCA (2 Componentes)")
        if df_X_procesado is not None and df_clusters_info.shape[0] == df_X_procesado.shape[0]:
            pca = PCA(n_components=2, random_state=42)
            principal_components = pca.fit_transform(df_X_procesado)
            df_pca = pd.DataFrame(data=principal_components, columns=['PCA Componente 1', 'PCA Componente 2'])
            
            df_pca['Cl√∫ster Etiqueta'] = df_clusters_info['cluster_kmedoids'].astype(str).values 
            df_pca['Cl√∫ster Nombre'] = df_pca['Cl√∫ster Etiqueta'].map(lambda x: f"Cl√∫ster {x}: {cluster_names.get(x, '')}")

            fig_pca = px.scatter(df_pca, x='PCA Componente 1', y='PCA Componente 2', color='Cl√∫ster Nombre',
                                 title='Separaci√≥n de PYMEs por Cl√∫ster (PCA)',
                                 color_discrete_map={f"Cl√∫ster {k}: {v}": cluster_colors[k] for k, v in cluster_names.items()},
                                 hover_data={'Cl√∫ster Nombre': True, 'Cl√∫ster Etiqueta': True}
                                )
            st.plotly_chart(fig_pca, use_container_width=True)
            
            explained_variance = pca.explained_variance_ratio_
            st.caption(f"Varianza explicada por PCA1: {explained_variance[0]:.2%}")
            st.caption(f"Varianza explicada por PCA2: {explained_variance[1]:.2%}")
            st.caption(f"Varianza total explicada por los 2 componentes: {sum(explained_variance):.2%}")
        else:
            st.warning("No se puede generar el gr√°fico PCA: datos de X_procesado no disponibles o no coinciden en tama√±o.")

else:
    st.error("No se pudieron cargar todos los datos necesarios. Por favor, verifica que los archivos CSV est√©n en la misma carpeta y se hayan generado correctamente.")